package ru.schneider_dev.tronfg.screens;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.scenes.scene2d.InputEvent;
import com.badlogic.gdx.scenes.scene2d.Touchable;
import com.badlogic.gdx.scenes.scene2d.actions.Actions;
import com.badlogic.gdx.scenes.scene2d.ui.Image;
import com.badlogic.gdx.scenes.scene2d.ui.Label;
import com.badlogic.gdx.scenes.scene2d.ui.ScrollPane;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener;
import com.badlogic.gdx.utils.Align;
import com.boontaran.games.StageGame;
import ru.schneider_dev.tronfg.TRONgame;
import ru.schneider_dev.tronfg.controls.TextButton;
import ru.schneider_dev.tronfg.utils.Data;
import ru.schneider_dev.tronfg.services.LeaderboardService;
import ru.schneider_dev.tronfg.services.LeaderboardServiceFactory;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

import static ru.schneider_dev.tronfg.controls.TextButton.*;

/**
 * –≠–∫—Ä–∞–Ω –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞
 * 
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã SCORE:
 * | RANK | LEVEL | USER TIME | LEVEL BEST |
 * |------|-------|-----------|------------|
 * | 2/5  |   1   |   0:18    |   0:18     | ‚Üê –†–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—Ä–æ–≤–µ–Ω—å, –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ª—É—á—à–µ–µ –≤—Ä–µ–º—è —É—Ä–æ–≤–Ω—è
 * | 5/5  |   2   |   0:25    |   0:15     | ‚Üê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ 5-–º –º–µ—Å—Ç–µ –∏–∑ 5, –µ–≥–æ –≤—Ä–µ–º—è 25 —Å–µ–∫, –ª—É—á—à–µ–µ –≤—Ä–µ–º—è —É—Ä–æ–≤–Ω—è 15 —Å–µ–∫
 * 
 * –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
 * 1. –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–µ—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 * 2. –ö–Ω–æ–ø–∫–∞ REFRESH RANKINGS –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase
 * 3. –ö–µ—à –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * 
 * üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ó–ê–ü–†–û–°–û–í (v2.0):
 * - –†–ê–ù–¨–®–ï: N –≤—ã–∑–æ–≤–æ–≤ getRank() + N –≤—ã–∑–æ–≤–æ–≤ getBestTime() = –¥–æ 32 –∑–∞–ø—Ä–æ—Å–æ–≤
 * - –¢–ï–ü–ï–†–¨: 1 –≤—ã–∑–æ–≤ getAllUserRanks() + 1 –≤—ã–∑–æ–≤ getAllLevelsBestTimes() = 2 –∑–∞–ø—Ä–æ—Å–∞
 * - –≠–ö–û–ù–û–ú–ò–Ø: –¥–æ 30 —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤! (15x –±—ã—Å—Ç—Ä–µ–µ)
 * 
 * üéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–ü–†–ê–í–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í (v2.1):
 * - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
 * - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –õ–£–ß–®–ò–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
 * - ScoreScreen —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * - –ù–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!
 */
public class ScoreScreen extends StageGame {

	public static final int ON_BACK = 1;
	public static final int ON_BACK_TO_INTRO = 2;
	public static final int ON_BACK_TO_LEVEL_LIST = 3;

	private TextButton backButton;
	private TextButton titleLabel;
	private TextButton updateButton;

	private Table scoreTable;
	private ScrollPane scrollPane;
	private LeaderboardService leaderboardService;
	private Map<Integer, Label> levelIdToRankLabel = new HashMap<>();
	private Map<Integer, Label> levelIdToBestLabel = new HashMap<>();
	private Map<Integer, Label> levelIdToTimeLabel = new HashMap<>();
	private Map<Integer, String> cachedRanks = new HashMap<>();
	private Map<Integer, Float> cachedBestTimes = new HashMap<>();
	private long lastUpdateTime = 0;
	private static final long CACHE_TTL_MS = 5 * 60 * 1000L; // 5 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
	private int sourceScreen; // –û—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏: 1 - Intro, 2 - LevelList
	private int[] completedRequests = {0}; // –°—á–µ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

	public ScoreScreen(int sourceScreen) {
		this.sourceScreen = sourceScreen;
		setupBackground();
		setupTitle();
		setupUpdateButton();
		
		leaderboardService = LeaderboardServiceFactory.createLeaderboardService();
		
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–µ—à –ü–ï–†–ï–î —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã
		loadCachedData();
		
		setupScoreTable();
		setupBackButton();

		updateRankings();
		// –ï—Å–ª–∏ –µ—Å—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª—É—á—à–∏–µ –≤—Ä–µ–º–µ–Ω–∞, –ø—Ä–∏–º–µ–Ω—è–µ–º –∏—Ö —Å—Ä–∞–∑—É
		if (!cachedBestTimes.isEmpty()) {
			applyCachedData();
		}
		
		Gdx.app.log("ScoreScreen", "ScoreScreen setup completed");
	}
	
	private void loadCachedData() {
		// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à –∏–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
		Data data = TRONgame.data;
		if (data != null) {
			lastUpdateTime = data.getLong("cache_last_update_time", 0L);
			
			for (int i = 1; i <= 16; i++) {
				int rankHash = data.getInt("cache_rank_" + i, 0);
				float bestTime = data.getFloat("cache_best_" + i, 0f);
				
				if (rankHash != 0) {
					String rank = decodeRankFromHash(rankHash);
					cachedRanks.put(i, rank);
					Gdx.app.log("ScoreScreen", "Loaded cached rank for level " + i + ": " + rank);
				}
				if (bestTime > 0f) {
					cachedBestTimes.put(i, bestTime);
					Gdx.app.log("ScoreScreen", "Loaded cached best time for level " + i + ": " + bestTime);
				}
			}
			
			Gdx.app.log("ScoreScreen", "Cache loaded: " + cachedRanks.size() + " ranks, " + cachedBestTimes.size() + " best times");
		}
	}
	
	private void saveCachedData() {
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –ø–∞–º—è—Ç—å
		Data data = TRONgame.data;
		if (data != null) {
			data.saveLong("cache_last_update_time", lastUpdateTime);
			
			for (Map.Entry<Integer, String> e : cachedRanks.entrySet()) {
				int hash = encodeRankToHash(e.getValue());
				data.saveInt("cache_rank_" + e.getKey(), hash);
				Gdx.app.log("ScoreScreen", "Saved cached rank for level " + e.getKey() + ": " + e.getValue());
			}
			for (Map.Entry<Integer, Float> e : cachedBestTimes.entrySet()) {
				data.saveFloat("cache_best_" + e.getKey(), e.getValue());
				Gdx.app.log("ScoreScreen", "Saved cached best time for level " + e.getKey() + ": " + e.getValue());
			}
			
			Gdx.app.log("ScoreScreen", "Cache saved: " + cachedRanks.size() + " ranks, " + cachedBestTimes.size() + " best times");
		}
	}
	
	private int encodeRankToHash(String rank) {
		// –ü—Ä–æ—Å—Ç–∞—è —Å—Ö–µ–º–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–Ω–≥–∞ –≤ —Ö–µ—à
		// –§–æ—Ä–º–∞—Ç: "rank/total" -> —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ rank * 1000 + total
		try {
			String[] parts = rank.split("/");
			if (parts.length == 2) {
				int rankNum = Integer.parseInt(parts[0]);
				int totalNum = Integer.parseInt(parts[1]);
				return rankNum * 1000 + totalNum;
			}
		} catch (NumberFormatException e) {
			// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
		}
		return rank.hashCode(); // Fallback
	}
	
	private String decodeRankFromHash(int hash) {
		// –ü—Ä–æ—Å—Ç–∞—è —Å—Ö–µ–º–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ö–µ—à–∞ –≤ —Ä–∞–Ω–≥
		// –§–æ—Ä–º–∞—Ç: rank * 1000 + total -> "rank/total"
		if (hash > 1000 && hash < 999999) {
			int rank = hash / 1000;
			int total = hash % 1000;
			return rank + "/" + total;
		}
		return "1/1"; // Fallback
	}

	public void clearCache() {
		cachedRanks.clear();
		cachedBestTimes.clear();
		lastUpdateTime = 0;
	}

	private void setupBackground() {
		Gdx.app.log("ScoreScreen", "Setting up background");
		Image bg = new Image(TRONgame.atlas.findRegion("intro_bg"));
		addBackground(bg, true, false);
		Gdx.app.log("ScoreScreen", "Background added");
	}

	private void setupTitle() {
		titleLabel = new TextButton("SCORE BOARD", TRONgame.tr2nFont, Color.GOLD, Color.GOLD);
		titleLabel.setFontScale(1.5f);
		addChild(titleLabel);

		centerHorizontally(titleLabel);
		titleLabel.setY(getHeight() - 60);
	}

	private void setupScoreTable() {
		scoreTable = new Table();
		scoreTable.pad(10);

		Label.LabelStyle headerStyle = new Label.LabelStyle(TRONgame.tr2nFont, Color.GOLD);
		headerStyle.font.setColor(Color.GOLD);

		Label rankHeader = new Label("RANK", headerStyle);
		Label levelHeader = new Label("LEVEL", headerStyle);
		Label timeHeader = new Label("TIME", headerStyle);
		Label levelBest = new Label("BEST", headerStyle);

		// –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
		rankHeader.setFontScale(0.8f);
		levelHeader.setFontScale(0.8f);
		timeHeader.setFontScale(0.8f);
		levelBest.setFontScale(0.8f);

		rankHeader.setAlignment(Align.center);
		levelHeader.setAlignment(Align.center);
		timeHeader.setAlignment(Align.center);
		levelBest.setAlignment(Align.center);

		scoreTable.add(rankHeader).width(100).height(40).padRight(40);
		scoreTable.add(levelHeader).width(140).height(40).padRight(10);
		scoreTable.add(timeHeader).width(140).height(40).padRight(30);
		scoreTable.add(levelBest).width(140).height(40);
		scoreTable.row();

		List<ScoreEntry> scores = getScoreData();
		
		if (scores.isEmpty()) {
			Label.LabelStyle noDataStyle = new Label.LabelStyle(TRONgame.font24, Color.GRAY);
			Label noDataLabel = new Label("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", noDataStyle);
			noDataLabel.setAlignment(Align.center);
			scoreTable.add(noDataLabel).colspan(4).width(400).height(100);
		} else {
			Collections.sort(scores, new Comparator<ScoreEntry>() {
				@Override
				public int compare(ScoreEntry o1, ScoreEntry o2) {
					return Integer.compare(o1.levelId, o2.levelId);
				}
			});

			Label.LabelStyle scoreStyle = new Label.LabelStyle(TRONgame.font24, Color.WHITE);
			for (int i = 0; i < scores.size(); i++) {
				ScoreEntry entry = scores.get(i);
				
				// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –ø—Ä–æ–π–¥–µ–Ω –ª–∏ —É—Ä–æ–≤–µ–Ω—å
				boolean isCompleted = entry.levelTime > 0;
				Color textColor = isCompleted ? Color.WHITE : Color.GRAY;
				
				Label rankLabel = new Label("-", scoreStyle);
				Label levelLabel = new Label("Level " + entry.levelId, scoreStyle);
				Label timeLabel = new Label(isCompleted ? formatTime(entry.levelTime) : "---", scoreStyle);
				Label bestLabel = new Label("-", scoreStyle); // –î–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "-", –∫–æ—Ç–æ—Ä—ã–π –∑–∞–º–µ–Ω–∏—Ç—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è

				rankLabel.setAlignment(Align.center);
				levelLabel.setAlignment(Align.center);
				timeLabel.setAlignment(Align.center);
				bestLabel.setAlignment(Align.center);

				// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞
				rankLabel.setColor(textColor);
				levelLabel.setColor(textColor);
				timeLabel.setColor(textColor);
				bestLabel.setColor(textColor);

				scoreTable.add(rankLabel).width(100).height(30).padRight(40);
				scoreTable.add(levelLabel).width(140).height(30).padRight(20);
				scoreTable.add(timeLabel).width(140).height(30).padRight(20);
				scoreTable.add(bestLabel).width(140).height(30);
				scoreTable.row();

				// –ö–∞—Ä—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –ë–î (—Ä–∞–Ω–≥–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö, –ª—É—á—à–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö)
				if (isCompleted) {
					levelIdToRankLabel.put(entry.levelId, rankLabel);
				}
				// –õ—É—á—à–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –Ω—É–∂–Ω—ã –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π
				levelIdToBestLabel.put(entry.levelId, bestLabel);
				levelIdToTimeLabel.put(entry.levelId, timeLabel);
			}
		}

		scrollPane = new ScrollPane(scoreTable);
		
		// –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ü–û–î –∫–Ω–æ–ø–∫–æ–π UPDATE –∏ –ù–ê–î –∫–Ω–æ–ø–∫–æ–π BACK
		float updateButtonY = updateButton.getY();
		float backButtonY = 30;
		float topMarginFromUpdate = 20f; // –±—ã–ª–æ 40f ‚Äî —É–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π UPDATE
		float bottomMarginFromBack = 40f;
		float availableHeight = (updateButtonY - topMarginFromUpdate) - (backButtonY + bottomMarginFromBack);
		if (availableHeight < 100) availableHeight = 100;
		
		scrollPane.setSize(800, availableHeight);
		// –ü–æ–¥–Ω–∏–º–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤—ã—à–µ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –æ—Ç –∫–Ω–æ–ø–∫–∏ BACK
		scrollPane.setPosition((getWidth() - scrollPane.getWidth()) / 2, backButtonY + bottomMarginFromBack + 20);
		scrollPane.setScrollingDisabled(true, false);
		addChild(scrollPane);
		
		// –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —ç–∫—Ä–∞–Ω–∞)
		if (!cachedRanks.isEmpty() || !cachedBestTimes.isEmpty()) {
			applyCachedData();
		}
	}

	private void setupUpdateButton() {
		updateButton = new TextButton("REFRESH RANKINGS", TRONgame.tr2nFont, TextButton.NEON_WHITE, TextButton.NEON_BLUE);
		addChild(updateButton);
		centerHorizontally(updateButton);
		updateButton.setY(getHeight() - 120);
		
		updateButton.addListener(new ClickListener() {
			@Override
			public void clicked(InputEvent event, float x, float y) {
				TRONgame.playSoundSafe("new_click.ogg");
				updateRankings();
			}
		});
	}

	private void updateRankings() {
		// –ö–Ω–æ–ø–∫–∞ UPDATE –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç - —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–µ—à–∞
		updateButton.setTouchable(Touchable.disabled);
		updateButton.setColor(NEON_BLUE);
		updateButton.setText("REFRESHING...");

		// –¢–µ–ø–µ—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω–µ–π,
		// –ø–æ—ç—Ç–æ–º—É —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
		String userId = TRONgame.data.getUserId();
		getAllDataOptimized(userId);
	}
	
	private void applyCachedData() {
		Gdx.app.log("ScoreScreen", "Applying cached data...");
		
		for (Map.Entry<Integer, String> entry : cachedRanks.entrySet()) {
			Label rankLabel = levelIdToRankLabel.get(entry.getKey());
			if (rankLabel != null) {
				rankLabel.setText(entry.getValue());
				Gdx.app.log("ScoreScreen", "Applied cached rank for level " + entry.getKey() + ": " + entry.getValue());
			}
		}
		
		// –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª—É—á—à–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π
		for (int levelId = 1; levelId <= 16; levelId++) {
			if (cachedBestTimes.containsKey(levelId)) {
				float globalBest = cachedBestTimes.get(levelId);
				Label bestLabel = levelIdToBestLabel.get(levelId);
				if (bestLabel != null) {
					bestLabel.setText(formatTime(globalBest));
					Gdx.app.log("ScoreScreen", "Applied cached best time for level " + levelId + ": " + globalBest);
				}
			}
		}
	}
	
	/**
	 * –ù–æ–≤—ã–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –í–°–ï–• –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–≤–∞ –∑–∞–ø—Ä–æ—Å–∞:
	 * 1. getAllUserRanks - —Ä–∞–Ω–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤—Å–µ–º —É—Ä–æ–≤–Ω—è–º
	 * 2. getAllLevelsBestTimes - –ª—É—á—à–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π
	 * 
	 * –í–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ getRank() –∏ getBestTime() –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è,
	 * —Ç–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ 2 –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!
	 * 
	 * –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω–µ–π,
	 * –ø–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å –º—ã —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
	 */
	private void getAllDataOptimized(String userId) {
		Gdx.app.log("ScoreScreen", "üöÄ Starting optimized data retrieval: user ranks + best times in 2 requests");
		Gdx.app.log("ScoreScreen", "üí° Note: Results are already submitted automatically when levels are completed!");
		
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
		completedRequests[0] = 0;
		final int totalRequests = 2;
		
		// 1. –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤—Å–µ–º —É—Ä–æ–≤–Ω—è–º –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
		Gdx.app.log("ScoreScreen", "üìä Request 1/2: Getting user ranks for all levels...");
		leaderboardService.getAllUserRanks(userId, new LeaderboardService.AllUserRanksCallback() {
			@Override
			public void onSuccess(Map<Integer, Integer> levelToRank, Map<Integer, Integer> levelToTotalPlayers, Map<Integer, Float> levelToUserBestTime) {
				Gdx.app.log("ScoreScreen", "‚úÖ User ranks received: " + levelToRank.size() + " levels");
				
				// –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π
				for (int levelId = 1; levelId <= 16; levelId++) {
					if (levelToRank.containsKey(levelId)) {
						final int rank = levelToRank.get(levelId);
						final int totalPlayers = levelToTotalPlayers.get(levelId);
						final float userBestTime = levelToUserBestTime.get(levelId);
						final int finalLevelId = levelId;
						
						// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–Ω–≥ –≤ –∫–µ—à
						cachedRanks.put(levelId, formatRank(rank, totalPlayers));
						
						// –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –†–ê–ù–ì–ê
						Label rankLabel = levelIdToRankLabel.get(levelId);
						if (rankLabel != null) {
							Gdx.app.postRunnable(() -> {
								rankLabel.setText(formatRank(rank, totalPlayers));
								Gdx.app.log("ScoreScreen", "Updated rank label for level " + finalLevelId + " to: " + formatRank(rank, totalPlayers));
							});
						}
						
						// –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –í–†–ï–ú–ï–ù–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (–∫–æ–ª–æ–Ω–∫–∞ TIME)
						Label timeLabel = levelIdToTimeLabel.get(levelId);
						if (timeLabel != null && userBestTime > 0) {
							Gdx.app.postRunnable(() -> {
								timeLabel.setText(formatTime(userBestTime));
								Gdx.app.log("ScoreScreen", "Updated user time label for level " + finalLevelId + " to: " + formatTime(userBestTime));
							});
						}
					}
				}
				
				// –û—Ç–º–µ—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
				completedRequests[0]++;
				Gdx.app.log("ScoreScreen", "üìä Request 1/2 completed successfully");
				checkAllRequestsCompleted();
			}
			
			@Override
			public void onError(String error) {
				Gdx.app.log("ScoreScreen", "‚ùå Error in user ranks request: " + error);
				// –û—Ç–º–µ—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (—Å –æ—à–∏–±–∫–æ–π)
				completedRequests[0]++;
				checkAllRequestsCompleted();
			}
		});
		
		// 2. –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
		Gdx.app.log("ScoreScreen", "‚è±Ô∏è Request 2/2: Getting best times for all levels...");
		leaderboardService.getAllLevelsBestTimes(new LeaderboardService.AllLevelsBestTimesCallback() {
			@Override
			public void onSuccess(Map<Integer, Float> levelToBestTime, Map<Integer, Integer> levelToTotalPlayers) {
				Gdx.app.log("ScoreScreen", "‚úÖ Best times received: " + levelToBestTime.size() + " levels");
				
				// –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π
				for (int levelId = 1; levelId <= 16; levelId++) {
					if (levelToBestTime.containsKey(levelId)) {
						final float bestTime = levelToBestTime.get(levelId);
						final int finalLevelId = levelId;
						cachedBestTimes.put(levelId, bestTime);
						
						// –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –õ–£–ß–®–ï–ì–û –í–†–ï–ú–ï–ù–ò –£–†–û–í–ù–Ø (–∫–æ–ª–æ–Ω–∫–∞ BEST)
						Label bestLabel = levelIdToBestLabel.get(levelId);
						if (bestLabel != null) {
							Gdx.app.postRunnable(() -> {
								bestLabel.setText(formatTime(bestTime));
								Gdx.app.log("ScoreScreen", "Updated level best time label for level " + finalLevelId + " to: " + formatTime(bestTime));
							});
						}
					}
				}
				
				// –û—Ç–º–µ—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
				completedRequests[0]++;
				Gdx.app.log("ScoreScreen", "‚è±Ô∏è Request 2/2 completed successfully");
				checkAllRequestsCompleted();
			}
			
			@Override
			public void onError(String error) {
				Gdx.app.log("ScoreScreen", "‚ùå Error in best times request: " + error);
				// –û—Ç–º–µ—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (—Å –æ—à–∏–±–∫–æ–π)
				completedRequests[0]++;
				checkAllRequestsCompleted();
			}
		});
	}
	
	/**
	 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω—ã –ª–∏ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã, –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç UI
	 */
	private void checkAllRequestsCompleted() {
		if (completedRequests[0] >= 2) {
			// –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã (—É—Å–ø–µ—à–Ω–æ –∏–ª–∏ —Å –æ—à–∏–±–∫–∞–º–∏)
			lastUpdateTime = System.currentTimeMillis();
			saveCachedData();
			Gdx.app.log("ScoreScreen", "All requests completed, updating cache and button");
			Gdx.app.postRunnable(() -> {
				updateButton.setText("RANKINGS REFRESHED");
				updateButton.setColor(NEON_GREEN);
				updateButton.setTouchable(Touchable.enabled);
			});
		}
	}
	
	/**
	 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
	 */
	private void handleOptimizedRequestError(String requestType, String error) {
		Gdx.app.log("ScoreScreen", "Error in " + requestType + ": " + error);
		
		// –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
		Gdx.app.postRunnable(() -> {
			updateButton.setText("UPDATE FAILED");
			updateButton.setColor(Color.RED);
			updateButton.setTouchable(Touchable.enabled);
		});
	}

	private void setupBackButton() {
		backButton = new TextButton("BACK", TRONgame.tr2nFont, Color.WHITE, Color.RED);
		addChild(backButton);

		centerHorizontally(backButton);
		backButton.setY(30);

		backButton.addListener(new ClickListener() {
			@Override
			public void clicked(InputEvent event, float x, float y) {
				TRONgame.playSoundSafe("new_click.ogg");
				onClickBack();
			}
		});
	}

	private void centerHorizontally(TextButton button) {
		button.updateSize();
		float centerX = (getWidth() - button.getWidth()) / 2;
		button.setX(centerX);
		Gdx.app.log("ScoreScreen", "Button centered at X: " + centerX + " (screen width: " + getWidth() + ", button width: " + button.getWidth() + ")");
	}

	private void onClickBack() {
		backButton.setTouchable(Touchable.disabled);
		backButton.addAction(Actions.fadeOut(0.3f));
		delayCall("back", 0.3f);
	}

	@Override
	protected void onDelayCall(String code) {
		if ("back".equals(code)) {
			// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è —Ç—É–¥–∞, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
			if (sourceScreen == 1) {
				call(ON_BACK_TO_INTRO);
			} else if (sourceScreen == 2) {
				call(ON_BACK_TO_LEVEL_LIST);
			} else {
				call(ON_BACK); // Fallback
			}
		}
	}

	@Override
	public boolean keyUp(int keycode) {
		if (keycode == Input.Keys.ESCAPE || keycode == Input.Keys.BACK) {
			onClickBack();
			return true;
		}
		return super.keyUp(keycode);
	}

	private List<ScoreEntry> getScoreData() {
		List<ScoreEntry> scores = new ArrayList<>();
		
		Data data = TRONgame.data;
		if (data != null) {
			// –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö 16 —É—Ä–æ–≤–Ω–µ–π
			for (int levelId = 1; levelId <= 16; levelId++) {
				float levelTime = data.getLevelTime(levelId);
				// –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ –ø—Ä–æ–π–¥–µ–Ω, –≤—Ä–µ–º—è –±—É–¥–µ—Ç 0
				float bestUserTime = levelTime > 0 ? levelTime : 0f;
				scores.add(new ScoreEntry(levelId, bestUserTime, 0f));
			}
		}
		
		return scores;
	}

	private String formatTime(float timeInSeconds) {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
		if (timeInSeconds <= 0) {
			return "---";
		}
		
		int minutes = (int) (timeInSeconds / 60);
		int seconds = (int) (timeInSeconds % 60);
		return String.format("%02d:%02d", minutes, seconds);
	}
	
	private float getBestUserTimeForLevel(int levelId, float fallbackTime) {
		// –õ—É—á—à–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –≤—Ä–µ–º—è —Ö—Ä–∞–Ω–∏–º –ª–æ–∫–∞–ª—å–Ω–æ –≤ Data (–º–∏–Ω–∏–º—É–º –æ—Ç –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫)
		Data data = TRONgame.data;
		if (data != null) {
			float t = data.getLevelTime(levelId);
			if (t > 0f) return t;
		}
		return fallbackTime;
	}

	private String formatRank(int rank, int total) {
		return rank + "/" + total;
	}

	private static class ScoreEntry {
		int levelId;
		float levelTime;
		float bestTime; // –õ—É—á—à–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è

		ScoreEntry(int levelId, float levelTime, float bestTime) {
			this.levelId = levelId;
			this.levelTime = levelTime;
			this.bestTime = bestTime;
		}
	}
}
