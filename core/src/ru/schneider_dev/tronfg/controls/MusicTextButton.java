package ru.schneider_dev.tronfg.controls;

import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.GlyphLayout;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.InputEvent;
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener;
import ru.schneider_dev.tronfg.TRONgame;

import java.util.Random;
import com.badlogic.gdx.Gdx;

import static ru.schneider_dev.tronfg.TRONgame.GAME_MUSIC;

/**
 * –¢–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –º—É–∑—ã–∫–∏
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç "MUSIC: ON" (–∑–µ–ª–µ–Ω—ã–π) –∏–ª–∏ "MUSIC: OFF" (–∫—Ä–∞—Å–Ω—ã–π)
 * –ü—Ä–∏ –∫–ª–∏–∫–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º—É–∑—ã–∫–∏
 * –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–æ–≤—É—é —Å–ª—É—á–∞–π–Ω—É—é –º–µ–ª–æ–¥–∏—é
 */
public class MusicTextButton extends Actor {
    
    private boolean isMuted = false;
    private BitmapFont font;
    private GlyphLayout layout;
    private ClickListener clickListener;
    
    // –¶–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    private static final Color MUSIC_COLOR = Color.WHITE;
    private static final Color ON_COLOR = Color.GREEN;
    private static final Color OFF_COLOR = Color.RED;
    
    // –ú–∞—Å—Å–∏–≤ —Å –∏–º–µ–Ω–∞–º–∏ –∏–≥—Ä–æ–≤–æ–π –º—É–∑—ã–∫–∏ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    private static final Random random = new Random();
    
    // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –±—ã–ª–∞ –ª–∏ –º—É–∑—ã–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞
    private boolean wasMusicMuted = false;
    
    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–≥—Ä–∞—é—â—É—é –º—É–∑—ã–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–æ–≤
    private String lastPlayedMusic = null;
    
    public MusicTextButton() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —à—Ä–∏—Ñ—Ç font24 –∏–∑ TRONgame
        this.font = TRONgame.font24;
        this.layout = new GlyphLayout();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∞–∫—Ç–æ—Ä–∞
        setSize(150, 40); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å 120 –¥–æ 150 –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º
        isMuted = TRONgame.isSoundMuted;
        wasMusicMuted = isMuted;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º lastPlayedMusic —Å–ª—É—á–∞–π–Ω–æ–π –º—É–∑—ã–∫–æ–π
        lastPlayedMusic = GAME_MUSIC[random.nextInt(GAME_MUSIC.length)];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤
        addListener(new ClickListener() {
            @Override
            public void clicked(InputEvent event, float x, float y) {
                toggleMusic();
                if (clickListener != null) {
                    clickListener.clicked(event, x, y);
                }
            }
        });
    }
    
    public void setClickListener(ClickListener listener) {
        this.clickListener = listener;
    }
    
    public void toggleMusic() {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –í–°–ï–• –∑–≤—É–∫–æ–≤ (–º—É–∑—ã–∫–∞ —É—Ä–æ–≤–Ω—è + –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã)
        isMuted = !isMuted;
        updateMusicState();
    }
    
    public void setMuted(boolean muted) {
        this.isMuted = muted;
        updateMusicState();
    }
    
    public boolean isMuted() {
        return isMuted;
    }
    
    /**
     * –í—ã–±–∏—Ä–∞–µ—Ç –Ω–æ–≤—É—é —Å–ª—É—á–∞–π–Ω—É—é –º–µ–ª–æ–¥–∏—é –¥–ª—è –∏–≥—Ä—ã
     */
    private void selectNewRandomMusic() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –º—É–∑—ã–∫—É
        stopAllGameMusic();
        
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –º–µ–ª–æ–¥–∏—é, –æ—Ç–ª–∏—á–Ω—É—é –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π
        String newMusic;
        do {
            newMusic = GAME_MUSIC[random.nextInt(GAME_MUSIC.length)];
        } while (newMusic.equals(lastPlayedMusic) && GAME_MUSIC.length > 1);
        
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –º—É–∑—ã–∫—É
        lastPlayedMusic = newMusic;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –º—É–∑—ã–∫—É –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —É—Ä–æ–≤–Ω—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –º—É–∑—ã–∫—É –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        TRONgame.media.addMusic(newMusic);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –º—É–∑—ã–∫—É
        try {
            TRONgame.media.playMusic(newMusic, true);
        } catch (Exception e) {
            System.out.println("Cannot play new music: " + newMusic);
        }
    }
    
    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å—é –∏–≥—Ä–æ–≤—É—é –º—É–∑—ã–∫—É
     */
    private void stopAllGameMusic() {
        for (String music : GAME_MUSIC) {
            safeStopMusic(music);
        }
    }
    
    private void updateMusicState() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –í–°–ï–• –∑–≤—É–∫–æ–≤
        TRONgame.isSoundMuted = isMuted;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Data –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        if (TRONgame.data != null) {
            TRONgame.data.saveSoundMuted(isMuted);
            Gdx.app.log("MusicTextButton", "üíæ Sound setting saved: " + (isMuted ? "MUTED" : "UNMUTED"));
        }
        
        // –í –ò–ì–†–ï –∫–Ω–æ–ø–∫–∞ SOUND —É–ø—Ä–∞–≤–ª—è–µ—Ç –í–°–ï–ú–ò –∑–≤—É–∫–∞–º–∏!
        if (isMuted) {
            // –í–°–ï –∑–≤—É–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º—É–∑—ã–∫—É —É—Ä–æ–≤–Ω—è
            if (TRONgame.media != null) {
                for (String musicName : GAME_MUSIC) {
                    try {
                        if (TRONgame.media.isMusicPlaying(musicName)) {
                            TRONgame.media.stopMusic(musicName);
                        }
                    } catch (Exception e) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                    }
                }
            }
            Gdx.app.log("MusicTextButton", "üîá ALL SOUNDS muted (level music + sound effects)");
        } else {
            // –í–°–ï –∑–≤—É–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã - –≤–∫–ª—é—á–∞–µ–º –º—É–∑—ã–∫—É —É—Ä–æ–≤–Ω—è (–µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞)
            // –ú—É–∑—ã–∫–∞ —É—Ä–æ–≤–Ω—è –¥–æ–ª–∂–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –∏–∑ Level.java
            Gdx.app.log("MusicTextButton", "üîä ALL SOUNDS unmuted (level music + sound effects)");
        }
    }
    
    private void safeStopMusic(String musicName) {
        try {
            // –ü—Ä–æ—Å—Ç–æ –ø—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º—É–∑—ã–∫—É, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –±—É–¥–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            TRONgame.media.stopMusic(musicName);
        } catch (Exception e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ - —Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
            System.out.println("Music file " + musicName + " is not loaded or cannot be stopped");
        }
    }

    @Override
    public void draw(com.badlogic.gdx.graphics.g2d.Batch batch, float parentAlpha) {
        if (!isVisible()) return;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        String musicText = "MUSIC: ";
        String statusText = isMuted ? "OFF" : "ON";
        
        // –†–∏—Å—É–µ–º "MUSIC: " –±–µ–ª—ã–º —Ü–≤–µ—Ç–æ–º
        font.setColor(MUSIC_COLOR.r, MUSIC_COLOR.g, MUSIC_COLOR.b, MUSIC_COLOR.a * parentAlpha);
        layout.setText(font, musicText);
        float musicX = getX();
        float musicY = getY() + (getHeight() + layout.height) / 2;
        float musicWidth = layout.width; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∏—Ä–∏–Ω—É "MUSIC: "
        font.draw(batch, layout, musicX, musicY);
        
        // –†–∏—Å—É–µ–º "ON" –∏–ª–∏ "OFF" —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ü–≤–µ—Ç–æ–º
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ—Å–ª–µ "MUSIC: " —Å –Ω–µ–±–æ–ª—å—à–∏–º –æ—Ç—Å—Ç—É–ø–æ–º
        Color statusColor = isMuted ? OFF_COLOR : ON_COLOR;
        font.setColor(statusColor.r, statusColor.g, statusColor.b, statusColor.a * parentAlpha);
        layout.setText(font, statusText);
        float statusX = musicX + musicWidth + 8; // –ü–æ–∑–∏—Ü–∏—è –ø–æ—Å–ª–µ "MUSIC: " —Å –æ—Ç—Å—Ç—É–ø–æ–º 8 –ø–∏–∫—Å–µ–ª–µ–π
        font.draw(batch, layout, statusX, musicY);
    }
}
