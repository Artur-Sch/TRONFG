package ru.schneider_dev.tronfg.controls;

import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.GlyphLayout;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.InputEvent;
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener;
import ru.schneider_dev.tronfg.TRONgame;
import com.badlogic.gdx.Gdx;

/**
 * –¢–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –º—É–∑—ã–∫–∏ –¥–ª—è –º–µ–Ω—é
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç "MUSIC: ON" (–∑–µ–ª–µ–Ω—ã–π) –∏–ª–∏ "MUSIC: OFF" (–∫—Ä–∞—Å–Ω—ã–π)
 * –ü—Ä–∏ –∫–ª–∏–∫–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º—É–∑—ã–∫–∏
 * –ù–ï –º–µ–Ω—è–µ—Ç —Ç—Ä–µ–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ
 */
public class MenuMusicTextButton extends Actor {
    
    private boolean isMuted = false;
    private BitmapFont font;
    private GlyphLayout layout;
    private ClickListener clickListener;
    
    // –¶–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    private static final Color MUSIC_COLOR = Color.WHITE;
    private static final Color ON_COLOR = Color.GREEN;
    private static final Color OFF_COLOR = Color.RED;
    
    public MenuMusicTextButton() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —à—Ä–∏—Ñ—Ç font24 –∏–∑ TRONgame
        this.font = TRONgame.font24;
        this.layout = new GlyphLayout();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∞–∫—Ç–æ—Ä–∞
        setSize(150, 40);
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º
        isMuted = TRONgame.isSoundMuted;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤
        addListener(new ClickListener() {
            @Override
            public void clicked(InputEvent event, float x, float y) {
                toggleMusic();
                if (clickListener != null) {
                    clickListener.clicked(event, x, y);
                }
            }
        });
    }
    
    public void setClickListener(ClickListener listener) {
        this.clickListener = listener;
    }
    
    public void toggleMusic() {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –í–°–ï–• –∑–≤—É–∫–æ–≤ (–º—É–∑—ã–∫–∞ + –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã)
        isMuted = !isMuted;
        updateMusicState();
    }

    public void setMuted(boolean muted) {
        this.isMuted = muted;
        updateMusicState();
    }

    public boolean isMuted() {
        return isMuted;
    }

    private void updateMusicState() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –í–°–ï–• –∑–≤—É–∫–æ–≤
        TRONgame.isSoundMuted = isMuted;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Data –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        if (TRONgame.data != null) {
            TRONgame.data.saveSoundMuted(isMuted);
            Gdx.app.log("MenuMusicTextButton", "üíæ Sound setting saved: " + (isMuted ? "MUTED" : "UNMUTED"));
        }
        
        if (isMuted) {
            // –í–°–ï –∑–≤—É–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º—É–∑—ã–∫—É –º–µ–Ω—é
            safePauseMusic("new_menu.ogg");
            Gdx.app.log("MenuMusicTextButton", "üîá ALL SOUNDS muted (music + sound effects)");
        } else {
            // –í–°–ï –∑–≤—É–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã - –≤–∫–ª—é—á–∞–µ–º –º—É–∑—ã–∫—É –º–µ–Ω—é
            if (!TRONgame.media.isMusicPlaying("new_menu.ogg")) {
                TRONgame.media.playMusic("new_menu.ogg", true);
            }
            Gdx.app.log("MenuMusicTextButton", "üîä ALL SOUNDS unmuted (music + sound effects)");
        }
    }
    
    private void safeStopMusic(String musicName) {
        try {
            TRONgame.media.stopMusic(musicName);
        } catch (Exception e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ - —Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
            System.out.println("Music file " + musicName + " is not loaded or cannot be stopped");
        }
    }

    private void safePauseMusic(String musicName) {
        try {
            TRONgame.media.pauseMusic(musicName);
        } catch (Exception e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ - —Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
            System.out.println("Music file " + musicName + " is not loaded or cannot be stopped");
        }
    }
    
    @Override
    public void draw(com.badlogic.gdx.graphics.g2d.Batch batch, float parentAlpha) {
        if (!isVisible()) return;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        String musicText = "SOUND: ";
        String statusText = isMuted ? "OFF" : "ON";
        
        // –†–∏—Å—É–µ–º "MUSIC: " –±–µ–ª—ã–º —Ü–≤–µ—Ç–æ–º
        font.setColor(MUSIC_COLOR.r, MUSIC_COLOR.g, MUSIC_COLOR.b, MUSIC_COLOR.a * parentAlpha);
        layout.setText(font, musicText);
        float musicX = getX();
        float musicY = getY() + (getHeight() + layout.height) / 2;
        float musicWidth = layout.width; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∏—Ä–∏–Ω—É "MUSIC: "
        font.draw(batch, layout, musicX, musicY);
        
        // –†–∏—Å—É–µ–º "ON" –∏–ª–∏ "OFF" —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ü–≤–µ—Ç–æ–º
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ—Å–ª–µ "MUSIC: " —Å –Ω–µ–±–æ–ª—å—à–∏–º –æ—Ç—Å—Ç—É–ø–æ–º
        Color statusColor = isMuted ? OFF_COLOR : ON_COLOR;
        font.setColor(statusColor.r, statusColor.g, statusColor.b, statusColor.a * parentAlpha);
        layout.setText(font, statusText);
        float statusX = musicX + musicWidth + 8; // –ü–æ–∑–∏—Ü–∏—è –ø–æ—Å–ª–µ "MUSIC: " —Å –æ—Ç—Å—Ç—É–ø–æ–º 8 –ø–∏–∫—Å–µ–ª–µ–π
        font.draw(batch, layout, statusX, musicY);
    }
}
